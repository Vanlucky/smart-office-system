/* Main.ino file generated by New Project wizard
 *
 * Created:   Thu Sep 5 2013
 * Processor: ATmega328P
 * Compiler:  Arduino AVR
 */
#include <Arduino.h> 
#include <Wire.h> 
#include <SPI.h>
#include <DHT.h>
#include <Arduino_FreeRTOS.h>
#include <semphr.h>

SemaphoreHandle_t interruptSemaphore; // 声明一个二值信号量
void interruptHandler(); 
TaskHandle_t StartTask_Handler; 
TaskHandle_t FANTask_Handler; 
TaskHandle_t SENSORTask_Handler; 
void start_task(void* pvParameters); 
void  fan_task(void* pvParameters); 
void sensor_task(void* pvParameters);
int key_pin = 2; 

#define DHTPIN  4  
// DHT 数据引脚 
#define DHTTYPE DHT11   // DHT11 
DHT dht(DHTPIN, DHTTYPE);
float h,t;
void setup()
 { // put your setup code here, to run once:
 pinMode(key_pin, INPUT_PULLUP);
delay(10);
Serial.begin(9600);
delay(10);
dht.begin();
delay(10);
 xTaskCreate( start_task, "start_task", 128, NULL, 1, &StartTask_Handler); 
 interruptSemaphore = xSemaphoreCreateBinary(); 
if (interruptSemaphore != NULL) { // 配置中断 
attachInterrupt(digitalPinToInterrupt(2), interruptHandler, LOW); 
} 
vTaskStartScheduler();    
 }
int speed=0;
void loop()
 { // put your main code here, to run repeatedly:
 
 }
 void start_task(void* pvParameters) { 
taskENTER_CRITICAL();   // 进入临界区 
xTaskCreate( fan_task, "fan_task",  128, NULL, 2, &FANTask_Handler); 
xTaskCreate( sensor_task, "sensor_task",  128, NULL, 2, &SENSORTask_Handler); 
vTaskDelete(StartTask_Handler);  // 删除start_task 
 taskEXIT_CRITICAL();    // 退出临界区 
 }
 void fan_task(void* pvParameters) { 
  for(;;) { 
   // 获取信号量 
   if (xSemaphoreTake(interruptSemaphore, portMAX_DELAY) == pdPASS) {
   speed+=40;
   if (speed >=200) speed =0;
  } 
  analogWrite(3, speed); 
  vTaskDelay(10);
   } 
}
void sensor_task(void* pvParameters) { 
  for(;;) { 
   float h = dht.readHumidity(); 
  float t = dht.readTemperature();
  Serial.print(F("Humidity: ")); 
  Serial.print(h); 
  Serial.print(F("%  Temperature: ")); 
  Serial.print(t);
  vTaskDelay(1000);
   } 
}
 void interruptHandler() { // 释放信号量 
xSemaphoreGiveFromISR(interruptSemaphore, NULL); 
}

